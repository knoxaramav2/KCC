//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from E:/Dev/C#/KCC/Antlr\kcc.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class kccParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		IF=1, ELSE=2, WHILE=3, FOREACH=4, CONTINUE=5, BREAK=6, RETURN=7, GOTO=8, 
		SET=9, ADD=10, SUBTRACT=11, MULTIPLY=12, DIVIDE=13, EXPONENT=14, MODULO=15, 
		SET_SUM=16, SET_DIFFERENCE=17, SET_PRODUCT=18, SET_QUOTIENT=19, INCREMENT=20, 
		DECRIMENT=21, LOGIC_OR=22, LOGIC_AND=23, LOGIC_NOT=24, LOGIC_NAND=25, 
		LOGIC_NOR=26, LOGIC_XOR=27, LOGIC_XNOR=28, GTR=29, LSS=30, EQU=31, GTR_EQU=32, 
		LSS_EQU=33, BITWISE_AND=34, BITWISE_OR=35, BITWISE_INVERT=36, CLASS=37, 
		L_BRACKET=38, R_BRACKET=39, L_PARANTH=40, R_PARANTH=41, L_BRACE=42, R_BRACE=43, 
		LINE_COMMENT=44, BLOCK_COMMENT=45, DECIMAL=46, IDENTIFIER=47, SEMI=48, 
		WS=49;
	public const int
		RULE_rules = 0, RULE_body_expr = 1, RULE_group = 2, RULE_expression = 3, 
		RULE_control_block = 4, RULE_control_id = 5, RULE_binary_arith_ops = 6, 
		RULE_binary_logic_ops = 7, RULE_unary_ops = 8, RULE_entity = 9;
	public static readonly string[] ruleNames = {
		"rules", "body_expr", "group", "expression", "control_block", "control_id", 
		"binary_arith_ops", "binary_logic_ops", "unary_ops", "entity"
	};

	private static readonly string[] _LiteralNames = {
		null, "'if'", "'else'", "'while'", "'foreach'", "'continue'", "'break'", 
		"'return'", "'goto'", "'='", "'+'", "'-'", "'*'", "'/'", "'**'", "'%'", 
		"'+='", "'-='", "'*='", "'/='", "'++'", "'--'", "'||'", "'&&'", "'!'", 
		"'!&'", "'!|'", "'^|'", "'^!'", "'>'", "'<'", "'=='", "'>='", "'<='", 
		"'&'", "'|'", "'^'", "'class'", null, null, "'('", "')'", null, null, 
		null, null, null, null, "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "IF", "ELSE", "WHILE", "FOREACH", "CONTINUE", "BREAK", "RETURN", 
		"GOTO", "SET", "ADD", "SUBTRACT", "MULTIPLY", "DIVIDE", "EXPONENT", "MODULO", 
		"SET_SUM", "SET_DIFFERENCE", "SET_PRODUCT", "SET_QUOTIENT", "INCREMENT", 
		"DECRIMENT", "LOGIC_OR", "LOGIC_AND", "LOGIC_NOT", "LOGIC_NAND", "LOGIC_NOR", 
		"LOGIC_XOR", "LOGIC_XNOR", "GTR", "LSS", "EQU", "GTR_EQU", "LSS_EQU", 
		"BITWISE_AND", "BITWISE_OR", "BITWISE_INVERT", "CLASS", "L_BRACKET", "R_BRACKET", 
		"L_PARANTH", "R_PARANTH", "L_BRACE", "R_BRACE", "LINE_COMMENT", "BLOCK_COMMENT", 
		"DECIMAL", "IDENTIFIER", "SEMI", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "kcc.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static kccParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public kccParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public kccParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class RulesContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(kccParser.Eof, 0); }
		public Body_exprContext[] body_expr() {
			return GetRuleContexts<Body_exprContext>();
		}
		public Body_exprContext body_expr(int i) {
			return GetRuleContext<Body_exprContext>(i);
		}
		public RulesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rules; } }
		public override void EnterRule(IParseTreeListener listener) {
			IkccListener typedListener = listener as IkccListener;
			if (typedListener != null) typedListener.EnterRules(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IkccListener typedListener = listener as IkccListener;
			if (typedListener != null) typedListener.ExitRules(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IkccVisitor<TResult> typedVisitor = visitor as IkccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRules(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RulesContext rules() {
		RulesContext _localctx = new RulesContext(Context, State);
		EnterRule(_localctx, 0, RULE_rules);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 23;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << L_BRACKET) | (1L << DECIMAL) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 20; body_expr();
				}
				}
				State = 25;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 26; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Body_exprContext : ParserRuleContext {
		public ITerminalNode L_BRACKET() { return GetToken(kccParser.L_BRACKET, 0); }
		public ITerminalNode R_BRACKET() { return GetToken(kccParser.R_BRACKET, 0); }
		public EntityContext entity() {
			return GetRuleContext<EntityContext>(0);
		}
		public GroupContext group() {
			return GetRuleContext<GroupContext>(0);
		}
		public Body_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_body_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IkccListener typedListener = listener as IkccListener;
			if (typedListener != null) typedListener.EnterBody_expr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IkccListener typedListener = listener as IkccListener;
			if (typedListener != null) typedListener.ExitBody_expr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IkccVisitor<TResult> typedVisitor = visitor as IkccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBody_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Body_exprContext body_expr() {
		Body_exprContext _localctx = new Body_exprContext(Context, State);
		EnterRule(_localctx, 2, RULE_body_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 31;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DECIMAL || _la==IDENTIFIER) {
				{
				State = 28; entity();
				State = 29; group();
				}
			}

			State = 33; Match(L_BRACKET);
			State = 34;
			MatchWildcard();
			State = 35; Match(R_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupContext : ParserRuleContext {
		public ITerminalNode L_PARANTH() { return GetToken(kccParser.L_PARANTH, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode R_PARANTH() { return GetToken(kccParser.R_PARANTH, 0); }
		public GroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_group; } }
		public override void EnterRule(IParseTreeListener listener) {
			IkccListener typedListener = listener as IkccListener;
			if (typedListener != null) typedListener.EnterGroup(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IkccListener typedListener = listener as IkccListener;
			if (typedListener != null) typedListener.ExitGroup(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IkccVisitor<TResult> typedVisitor = visitor as IkccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupContext group() {
		GroupContext _localctx = new GroupContext(Context, State);
		EnterRule(_localctx, 4, RULE_group);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 37; Match(L_PARANTH);
			State = 38; expression();
			State = 39; Match(R_PARANTH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public EntityContext[] entity() {
			return GetRuleContexts<EntityContext>();
		}
		public EntityContext entity(int i) {
			return GetRuleContext<EntityContext>(i);
		}
		public Binary_arith_opsContext binary_arith_ops() {
			return GetRuleContext<Binary_arith_opsContext>(0);
		}
		public Unary_opsContext[] unary_ops() {
			return GetRuleContexts<Unary_opsContext>();
		}
		public Unary_opsContext unary_ops(int i) {
			return GetRuleContext<Unary_opsContext>(i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IkccListener typedListener = listener as IkccListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IkccListener typedListener = listener as IkccListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IkccVisitor<TResult> typedVisitor = visitor as IkccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 6, RULE_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 42;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INCREMENT) | (1L << DECRIMENT) | (1L << LOGIC_NOT))) != 0)) {
				{
				State = 41; unary_ops();
				}
			}

			State = 44; entity();
			State = 45; binary_arith_ops();
			State = 47;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INCREMENT) | (1L << DECRIMENT) | (1L << LOGIC_NOT))) != 0)) {
				{
				State = 46; unary_ops();
				}
			}

			State = 49; entity();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Control_blockContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(kccParser.IF, 0); }
		public ITerminalNode ELSE() { return GetToken(kccParser.ELSE, 0); }
		public ITerminalNode WHILE() { return GetToken(kccParser.WHILE, 0); }
		public ITerminalNode FOREACH() { return GetToken(kccParser.FOREACH, 0); }
		public Control_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_control_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IkccListener typedListener = listener as IkccListener;
			if (typedListener != null) typedListener.EnterControl_block(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IkccListener typedListener = listener as IkccListener;
			if (typedListener != null) typedListener.ExitControl_block(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IkccVisitor<TResult> typedVisitor = visitor as IkccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitControl_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Control_blockContext control_block() {
		Control_blockContext _localctx = new Control_blockContext(Context, State);
		EnterRule(_localctx, 8, RULE_control_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 51;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IF) | (1L << ELSE) | (1L << WHILE) | (1L << FOREACH))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Control_idContext : ParserRuleContext {
		public ITerminalNode CONTINUE() { return GetToken(kccParser.CONTINUE, 0); }
		public ITerminalNode BREAK() { return GetToken(kccParser.BREAK, 0); }
		public ITerminalNode RETURN() { return GetToken(kccParser.RETURN, 0); }
		public ITerminalNode GOTO() { return GetToken(kccParser.GOTO, 0); }
		public Control_idContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_control_id; } }
		public override void EnterRule(IParseTreeListener listener) {
			IkccListener typedListener = listener as IkccListener;
			if (typedListener != null) typedListener.EnterControl_id(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IkccListener typedListener = listener as IkccListener;
			if (typedListener != null) typedListener.ExitControl_id(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IkccVisitor<TResult> typedVisitor = visitor as IkccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitControl_id(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Control_idContext control_id() {
		Control_idContext _localctx = new Control_idContext(Context, State);
		EnterRule(_localctx, 10, RULE_control_id);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 53;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CONTINUE) | (1L << BREAK) | (1L << RETURN) | (1L << GOTO))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Binary_arith_opsContext : ParserRuleContext {
		public ITerminalNode SET() { return GetToken(kccParser.SET, 0); }
		public ITerminalNode ADD() { return GetToken(kccParser.ADD, 0); }
		public ITerminalNode SUBTRACT() { return GetToken(kccParser.SUBTRACT, 0); }
		public ITerminalNode MULTIPLY() { return GetToken(kccParser.MULTIPLY, 0); }
		public ITerminalNode DIVIDE() { return GetToken(kccParser.DIVIDE, 0); }
		public ITerminalNode EXPONENT() { return GetToken(kccParser.EXPONENT, 0); }
		public ITerminalNode MODULO() { return GetToken(kccParser.MODULO, 0); }
		public ITerminalNode SET_SUM() { return GetToken(kccParser.SET_SUM, 0); }
		public ITerminalNode SET_DIFFERENCE() { return GetToken(kccParser.SET_DIFFERENCE, 0); }
		public ITerminalNode SET_PRODUCT() { return GetToken(kccParser.SET_PRODUCT, 0); }
		public ITerminalNode SET_QUOTIENT() { return GetToken(kccParser.SET_QUOTIENT, 0); }
		public Binary_arith_opsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binary_arith_ops; } }
		public override void EnterRule(IParseTreeListener listener) {
			IkccListener typedListener = listener as IkccListener;
			if (typedListener != null) typedListener.EnterBinary_arith_ops(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IkccListener typedListener = listener as IkccListener;
			if (typedListener != null) typedListener.ExitBinary_arith_ops(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IkccVisitor<TResult> typedVisitor = visitor as IkccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinary_arith_ops(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Binary_arith_opsContext binary_arith_ops() {
		Binary_arith_opsContext _localctx = new Binary_arith_opsContext(Context, State);
		EnterRule(_localctx, 12, RULE_binary_arith_ops);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SET) | (1L << ADD) | (1L << SUBTRACT) | (1L << MULTIPLY) | (1L << DIVIDE) | (1L << EXPONENT) | (1L << MODULO) | (1L << SET_SUM) | (1L << SET_DIFFERENCE) | (1L << SET_PRODUCT) | (1L << SET_QUOTIENT))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Binary_logic_opsContext : ParserRuleContext {
		public ITerminalNode LOGIC_OR() { return GetToken(kccParser.LOGIC_OR, 0); }
		public ITerminalNode LOGIC_AND() { return GetToken(kccParser.LOGIC_AND, 0); }
		public ITerminalNode LOGIC_NOT() { return GetToken(kccParser.LOGIC_NOT, 0); }
		public ITerminalNode LOGIC_NAND() { return GetToken(kccParser.LOGIC_NAND, 0); }
		public ITerminalNode LOGIC_NOR() { return GetToken(kccParser.LOGIC_NOR, 0); }
		public ITerminalNode LOGIC_XOR() { return GetToken(kccParser.LOGIC_XOR, 0); }
		public ITerminalNode LOGIC_XNOR() { return GetToken(kccParser.LOGIC_XNOR, 0); }
		public Binary_logic_opsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binary_logic_ops; } }
		public override void EnterRule(IParseTreeListener listener) {
			IkccListener typedListener = listener as IkccListener;
			if (typedListener != null) typedListener.EnterBinary_logic_ops(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IkccListener typedListener = listener as IkccListener;
			if (typedListener != null) typedListener.ExitBinary_logic_ops(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IkccVisitor<TResult> typedVisitor = visitor as IkccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinary_logic_ops(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Binary_logic_opsContext binary_logic_ops() {
		Binary_logic_opsContext _localctx = new Binary_logic_opsContext(Context, State);
		EnterRule(_localctx, 14, RULE_binary_logic_ops);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 57;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LOGIC_OR) | (1L << LOGIC_AND) | (1L << LOGIC_NOT) | (1L << LOGIC_NAND) | (1L << LOGIC_NOR) | (1L << LOGIC_XOR) | (1L << LOGIC_XNOR))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_opsContext : ParserRuleContext {
		public ITerminalNode INCREMENT() { return GetToken(kccParser.INCREMENT, 0); }
		public ITerminalNode DECRIMENT() { return GetToken(kccParser.DECRIMENT, 0); }
		public ITerminalNode LOGIC_NOT() { return GetToken(kccParser.LOGIC_NOT, 0); }
		public Unary_opsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_ops; } }
		public override void EnterRule(IParseTreeListener listener) {
			IkccListener typedListener = listener as IkccListener;
			if (typedListener != null) typedListener.EnterUnary_ops(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IkccListener typedListener = listener as IkccListener;
			if (typedListener != null) typedListener.ExitUnary_ops(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IkccVisitor<TResult> typedVisitor = visitor as IkccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_ops(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unary_opsContext unary_ops() {
		Unary_opsContext _localctx = new Unary_opsContext(Context, State);
		EnterRule(_localctx, 16, RULE_unary_ops);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 59;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INCREMENT) | (1L << DECRIMENT) | (1L << LOGIC_NOT))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityContext : ParserRuleContext {
		public ITerminalNode DECIMAL() { return GetToken(kccParser.DECIMAL, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(kccParser.IDENTIFIER, 0); }
		public EntityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity; } }
		public override void EnterRule(IParseTreeListener listener) {
			IkccListener typedListener = listener as IkccListener;
			if (typedListener != null) typedListener.EnterEntity(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IkccListener typedListener = listener as IkccListener;
			if (typedListener != null) typedListener.ExitEntity(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IkccVisitor<TResult> typedVisitor = visitor as IkccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntityContext entity() {
		EntityContext _localctx = new EntityContext(Context, State);
		EnterRule(_localctx, 18, RULE_entity);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61;
			_la = TokenStream.LA(1);
			if ( !(_la==DECIMAL || _la==IDENTIFIER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x33', '\x42', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x3', '\x2', '\a', '\x2', '\x18', '\n', '\x2', '\f', '\x2', '\xE', '\x2', 
		'\x1B', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x5', '\x3', '\"', '\n', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x5', '\x5', '\x5', '-', '\n', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x32', '\n', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', 
		'\a', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\n', 
		'\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x2', '\x2', '\f', 
		'\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', 
		'\x2', '\b', '\x3', '\x2', '\x3', '\x6', '\x3', '\x2', '\a', '\n', '\x3', 
		'\x2', '\v', '\x15', '\x3', '\x2', '\x18', '\x1E', '\x4', '\x2', '\x16', 
		'\x17', '\x1A', '\x1A', '\x3', '\x2', '\x30', '\x31', '\x2', ';', '\x2', 
		'\x19', '\x3', '\x2', '\x2', '\x2', '\x4', '!', '\x3', '\x2', '\x2', '\x2', 
		'\x6', '\'', '\x3', '\x2', '\x2', '\x2', '\b', ',', '\x3', '\x2', '\x2', 
		'\x2', '\n', '\x35', '\x3', '\x2', '\x2', '\x2', '\f', '\x37', '\x3', 
		'\x2', '\x2', '\x2', '\xE', '\x39', '\x3', '\x2', '\x2', '\x2', '\x10', 
		';', '\x3', '\x2', '\x2', '\x2', '\x12', '=', '\x3', '\x2', '\x2', '\x2', 
		'\x14', '?', '\x3', '\x2', '\x2', '\x2', '\x16', '\x18', '\x5', '\x4', 
		'\x3', '\x2', '\x17', '\x16', '\x3', '\x2', '\x2', '\x2', '\x18', '\x1B', 
		'\x3', '\x2', '\x2', '\x2', '\x19', '\x17', '\x3', '\x2', '\x2', '\x2', 
		'\x19', '\x1A', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x1C', '\x3', '\x2', 
		'\x2', '\x2', '\x1B', '\x19', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x1D', 
		'\a', '\x2', '\x2', '\x3', '\x1D', '\x3', '\x3', '\x2', '\x2', '\x2', 
		'\x1E', '\x1F', '\x5', '\x14', '\v', '\x2', '\x1F', ' ', '\x5', '\x6', 
		'\x4', '\x2', ' ', '\"', '\x3', '\x2', '\x2', '\x2', '!', '\x1E', '\x3', 
		'\x2', '\x2', '\x2', '!', '\"', '\x3', '\x2', '\x2', '\x2', '\"', '#', 
		'\x3', '\x2', '\x2', '\x2', '#', '$', '\a', '(', '\x2', '\x2', '$', '%', 
		'\v', '\x2', '\x2', '\x2', '%', '&', '\a', ')', '\x2', '\x2', '&', '\x5', 
		'\x3', '\x2', '\x2', '\x2', '\'', '(', '\a', '*', '\x2', '\x2', '(', ')', 
		'\x5', '\b', '\x5', '\x2', ')', '*', '\a', '+', '\x2', '\x2', '*', '\a', 
		'\x3', '\x2', '\x2', '\x2', '+', '-', '\x5', '\x12', '\n', '\x2', ',', 
		'+', '\x3', '\x2', '\x2', '\x2', ',', '-', '\x3', '\x2', '\x2', '\x2', 
		'-', '.', '\x3', '\x2', '\x2', '\x2', '.', '/', '\x5', '\x14', '\v', '\x2', 
		'/', '\x31', '\x5', '\xE', '\b', '\x2', '\x30', '\x32', '\x5', '\x12', 
		'\n', '\x2', '\x31', '\x30', '\x3', '\x2', '\x2', '\x2', '\x31', '\x32', 
		'\x3', '\x2', '\x2', '\x2', '\x32', '\x33', '\x3', '\x2', '\x2', '\x2', 
		'\x33', '\x34', '\x5', '\x14', '\v', '\x2', '\x34', '\t', '\x3', '\x2', 
		'\x2', '\x2', '\x35', '\x36', '\t', '\x2', '\x2', '\x2', '\x36', '\v', 
		'\x3', '\x2', '\x2', '\x2', '\x37', '\x38', '\t', '\x3', '\x2', '\x2', 
		'\x38', '\r', '\x3', '\x2', '\x2', '\x2', '\x39', ':', '\t', '\x4', '\x2', 
		'\x2', ':', '\xF', '\x3', '\x2', '\x2', '\x2', ';', '<', '\t', '\x5', 
		'\x2', '\x2', '<', '\x11', '\x3', '\x2', '\x2', '\x2', '=', '>', '\t', 
		'\x6', '\x2', '\x2', '>', '\x13', '\x3', '\x2', '\x2', '\x2', '?', '@', 
		'\t', '\a', '\x2', '\x2', '@', '\x15', '\x3', '\x2', '\x2', '\x2', '\x6', 
		'\x19', '!', ',', '\x31',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
