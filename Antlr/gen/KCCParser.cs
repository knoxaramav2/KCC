//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from E:/Dev/C#/KCC/Antlr\KCC.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class KCCParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, IF=8, ELSE=9, 
		WHILE=10, FOREACH=11, CONTINUE=12, BREAK=13, RETURN=14, GOTO=15, SET=16, 
		ADD=17, SUBTRACT=18, MULTIPLY=19, DIVIDE=20, EXPONENT=21, MODULO=22, SET_SUM=23, 
		SET_DIFFERENCE=24, SET_PRODUCT=25, SET_QUOTIENT=26, INCREMENT=27, DECRIMENT=28, 
		LOGIC_OR=29, LOGIC_AND=30, LOGIC_NOT=31, LOGIC_NAND=32, LOGIC_NOR=33, 
		LOGIC_XOR=34, LOGIC_XNOR=35, GTR=36, LSS=37, EQU=38, GTR_EQU=39, LSS_EQU=40, 
		BITWISE_AND=41, BITWISE_OR=42, BITWISE_INVERT=43, CLASS=44, THIS=45, TRUE=46, 
		FALSE=47, ASSEMBLY=48, JOINT=49, DOT=50, L_BRACKET=51, R_BRACKET=52, L_PARANTH=53, 
		R_PARANTH=54, L_BRACE=55, R_BRACE=56, LINE_COMMENT=57, BLOCK_COMMENT=58, 
		DECIMAL=59, IDENTIFIER=60, SEMI=61, WS=62;
	public const int
		RULE_rules = 0, RULE_asm = 1, RULE_block = 2, RULE_class = 3, RULE_statement = 4, 
		RULE_expression = 5, RULE_call = 6, RULE_function = 7, RULE_group = 8, 
		RULE_asm_id = 9, RULE_id = 10, RULE_symbol_id = 11, RULE_logic_id = 12, 
		RULE_control_block = 13, RULE_control_id = 14, RULE_unary_ops = 15, RULE_binary_arith_ops = 16, 
		RULE_binary_logic_ops = 17, RULE_binary = 18, RULE_bool = 19, RULE_arith_expr = 20, 
		RULE_typeSpecifier = 21, RULE_array = 22;
	public static readonly string[] ruleNames = {
		"rules", "asm", "block", "class", "statement", "expression", "call", "function", 
		"group", "asm_id", "id", "symbol_id", "logic_id", "control_block", "control_id", 
		"unary_ops", "binary_arith_ops", "binary_logic_ops", "binary", "bool", 
		"arith_expr", "typeSpecifier", "array"
	};

	private static readonly string[] _LiteralNames = {
		null, "'int'", "'sint'", "'double'", "'char'", "'byte'", "'string'", "'bool'", 
		"'if'", "'else'", "'while'", "'foreach'", "'continue'", "'break'", "'return'", 
		"'goto'", "'='", "'+'", "'-'", "'*'", "'/'", "'**'", "'%'", "'+='", "'-='", 
		"'*='", "'/='", "'++'", "'--'", "'||'", "'&&'", "'!'", "'!&'", "'!|'", 
		"'^|'", "'^!'", "'>'", "'<'", "'=='", "'>='", "'<='", "'&'", "'|'", "'~'", 
		"'class'", "'this'", "'true'", "'false'", "'assembly'", "':'", "'.'", 
		"'['", "']'", "'('", "')'", "'{'", "'}'", null, null, null, null, "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, "IF", "ELSE", "WHILE", 
		"FOREACH", "CONTINUE", "BREAK", "RETURN", "GOTO", "SET", "ADD", "SUBTRACT", 
		"MULTIPLY", "DIVIDE", "EXPONENT", "MODULO", "SET_SUM", "SET_DIFFERENCE", 
		"SET_PRODUCT", "SET_QUOTIENT", "INCREMENT", "DECRIMENT", "LOGIC_OR", "LOGIC_AND", 
		"LOGIC_NOT", "LOGIC_NAND", "LOGIC_NOR", "LOGIC_XOR", "LOGIC_XNOR", "GTR", 
		"LSS", "EQU", "GTR_EQU", "LSS_EQU", "BITWISE_AND", "BITWISE_OR", "BITWISE_INVERT", 
		"CLASS", "THIS", "TRUE", "FALSE", "ASSEMBLY", "JOINT", "DOT", "L_BRACKET", 
		"R_BRACKET", "L_PARANTH", "R_PARANTH", "L_BRACE", "R_BRACE", "LINE_COMMENT", 
		"BLOCK_COMMENT", "DECIMAL", "IDENTIFIER", "SEMI", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "KCC.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static KCCParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public KCCParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public KCCParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class RulesContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(KCCParser.Eof, 0); }
		public AsmContext[] asm() {
			return GetRuleContexts<AsmContext>();
		}
		public AsmContext asm(int i) {
			return GetRuleContext<AsmContext>(i);
		}
		public RulesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rules; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKCCListener typedListener = listener as IKCCListener;
			if (typedListener != null) typedListener.EnterRules(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKCCListener typedListener = listener as IKCCListener;
			if (typedListener != null) typedListener.ExitRules(this);
		}
	}

	[RuleVersion(0)]
	public RulesContext rules() {
		RulesContext _localctx = new RulesContext(Context, State);
		EnterRule(_localctx, 0, RULE_rules);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 49;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ASSEMBLY) {
				{
				{
				State = 46; asm();
				}
				}
				State = 51;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 52; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsmContext : ParserRuleContext {
		public ITerminalNode ASSEMBLY() { return GetToken(KCCParser.ASSEMBLY, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(KCCParser.IDENTIFIER, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public AsmContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asm; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKCCListener typedListener = listener as IKCCListener;
			if (typedListener != null) typedListener.EnterAsm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKCCListener typedListener = listener as IKCCListener;
			if (typedListener != null) typedListener.ExitAsm(this);
		}
	}

	[RuleVersion(0)]
	public AsmContext asm() {
		AsmContext _localctx = new AsmContext(Context, State);
		EnterRule(_localctx, 2, RULE_asm);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54; Match(ASSEMBLY);
			State = 55; Match(IDENTIFIER);
			State = 56; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public ITerminalNode L_BRACE() { return GetToken(KCCParser.L_BRACE, 0); }
		public ITerminalNode[] R_BRACE() { return GetTokens(KCCParser.R_BRACE); }
		public ITerminalNode R_BRACE(int i) {
			return GetToken(KCCParser.R_BRACE, i);
		}
		public FunctionContext[] function() {
			return GetRuleContexts<FunctionContext>();
		}
		public FunctionContext function(int i) {
			return GetRuleContext<FunctionContext>(i);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKCCListener typedListener = listener as IKCCListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKCCListener typedListener = listener as IKCCListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 4, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 58; Match(L_BRACE);
			State = 65;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << IF) | (1L << ELSE) | (1L << WHILE) | (1L << FOREACH) | (1L << CONTINUE) | (1L << BREAK) | (1L << RETURN) | (1L << GOTO) | (1L << SET) | (1L << ADD) | (1L << SUBTRACT) | (1L << MULTIPLY) | (1L << DIVIDE) | (1L << EXPONENT) | (1L << MODULO) | (1L << SET_SUM) | (1L << SET_DIFFERENCE) | (1L << SET_PRODUCT) | (1L << SET_QUOTIENT) | (1L << INCREMENT) | (1L << DECRIMENT) | (1L << LOGIC_OR) | (1L << LOGIC_AND) | (1L << LOGIC_NOT) | (1L << LOGIC_NAND) | (1L << LOGIC_NOR) | (1L << LOGIC_XOR) | (1L << LOGIC_XNOR) | (1L << GTR) | (1L << LSS) | (1L << EQU) | (1L << GTR_EQU) | (1L << LSS_EQU) | (1L << BITWISE_AND) | (1L << BITWISE_OR) | (1L << BITWISE_INVERT) | (1L << CLASS) | (1L << THIS) | (1L << TRUE) | (1L << FALSE) | (1L << ASSEMBLY) | (1L << JOINT) | (1L << DOT) | (1L << L_BRACKET) | (1L << R_BRACKET) | (1L << L_PARANTH) | (1L << R_PARANTH) | (1L << L_BRACE) | (1L << LINE_COMMENT) | (1L << BLOCK_COMMENT) | (1L << DECIMAL) | (1L << IDENTIFIER) | (1L << SEMI) | (1L << WS))) != 0)) {
				{
				State = 63;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
				case 1:
					{
					State = 59; function();
					}
					break;
				case 2:
					{
					State = 60; statement();
					}
					break;
				case 3:
					{
					State = 61; block();
					}
					break;
				case 4:
					{
					State = 62;
					_la = TokenStream.LA(1);
					if ( _la <= 0 || (_la==R_BRACE) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				}
				State = 67;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 68; Match(R_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassContext : ParserRuleContext {
		public ITerminalNode CLASS() { return GetToken(KCCParser.CLASS, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(KCCParser.IDENTIFIER, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKCCListener typedListener = listener as IKCCListener;
			if (typedListener != null) typedListener.EnterClass(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKCCListener typedListener = listener as IKCCListener;
			if (typedListener != null) typedListener.ExitClass(this);
		}
	}

	[RuleVersion(0)]
	public ClassContext @class() {
		ClassContext _localctx = new ClassContext(Context, State);
		EnterRule(_localctx, 6, RULE_class);
		try {
			State = 74;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CLASS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 70; Match(CLASS);
				State = 71; Match(IDENTIFIER);
				State = 72; block();
				}
				break;
			case INCREMENT:
			case DECRIMENT:
			case LOGIC_NOT:
			case TRUE:
			case FALSE:
			case L_PARANTH:
			case DECIMAL:
			case IDENTIFIER:
			case SEMI:
				EnterOuterAlt(_localctx, 2);
				{
				State = 73; statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public CallContext call() {
			return GetRuleContext<CallContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(KCCParser.SEMI, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] IDENTIFIER() { return GetTokens(KCCParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(KCCParser.IDENTIFIER, i);
		}
		public GroupContext group() {
			return GetRuleContext<GroupContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKCCListener typedListener = listener as IKCCListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKCCListener typedListener = listener as IKCCListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_statement);
		int _la;
		try {
			State = 90;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 76; call();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 80;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INCREMENT) | (1L << DECRIMENT) | (1L << LOGIC_NOT) | (1L << TRUE) | (1L << FALSE) | (1L << L_PARANTH) | (1L << DECIMAL) | (1L << IDENTIFIER))) != 0)) {
					{
					{
					State = 77; expression(0);
					}
					}
					State = 82;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 83; Match(SEMI);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 84; Match(IDENTIFIER);
				State = 85; Match(IDENTIFIER);
				State = 86; group();
				State = 87; block();
				State = 88; Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext left;
		public BinaryContext op;
		public ExpressionContext right;
		public ITerminalNode IDENTIFIER() { return GetToken(KCCParser.IDENTIFIER, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Symbol_idContext symbol_id() {
			return GetRuleContext<Symbol_idContext>(0);
		}
		public GroupContext group() {
			return GetRuleContext<GroupContext>(0);
		}
		public Unary_opsContext unary_ops() {
			return GetRuleContext<Unary_opsContext>(0);
		}
		public BoolContext @bool() {
			return GetRuleContext<BoolContext>(0);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public BinaryContext binary() {
			return GetRuleContext<BinaryContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKCCListener typedListener = listener as IKCCListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKCCListener typedListener = listener as IKCCListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 10;
		EnterRecursionRule(_localctx, 10, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 102;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 93; Match(IDENTIFIER);
				State = 94; expression(7);
				}
				break;
			case 2:
				{
				State = 95; symbol_id();
				}
				break;
			case 3:
				{
				State = 96; group();
				}
				break;
			case 4:
				{
				State = 97; unary_ops();
				State = 98; expression(4);
				}
				break;
			case 5:
				{
				State = 100; @bool();
				}
				break;
			case 6:
				{
				State = 101; id();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 110;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExpressionContext(_parentctx, _parentState);
					_localctx.left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_expression);
					State = 104;
					if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
					State = 105; _localctx.op = binary();
					State = 106; _localctx.right = expression(4);
					}
					} 
				}
				State = 112;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class CallContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public GroupContext group() {
			return GetRuleContext<GroupContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(KCCParser.SEMI, 0); }
		public CallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKCCListener typedListener = listener as IKCCListener;
			if (typedListener != null) typedListener.EnterCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKCCListener typedListener = listener as IKCCListener;
			if (typedListener != null) typedListener.ExitCall(this);
		}
	}

	[RuleVersion(0)]
	public CallContext call() {
		CallContext _localctx = new CallContext(Context, State);
		EnterRule(_localctx, 12, RULE_call);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113; expression(0);
			State = 114; group();
			State = 115; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(KCCParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(KCCParser.IDENTIFIER, i);
		}
		public GroupContext group() {
			return GetRuleContext<GroupContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKCCListener typedListener = listener as IKCCListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKCCListener typedListener = listener as IKCCListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 14, RULE_function);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117; Match(IDENTIFIER);
			State = 118; Match(IDENTIFIER);
			State = 119; group();
			State = 120; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupContext : ParserRuleContext {
		public ITerminalNode L_PARANTH() { return GetToken(KCCParser.L_PARANTH, 0); }
		public ITerminalNode[] R_PARANTH() { return GetTokens(KCCParser.R_PARANTH); }
		public ITerminalNode R_PARANTH(int i) {
			return GetToken(KCCParser.R_PARANTH, i);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public GroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_group; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKCCListener typedListener = listener as IKCCListener;
			if (typedListener != null) typedListener.EnterGroup(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKCCListener typedListener = listener as IKCCListener;
			if (typedListener != null) typedListener.ExitGroup(this);
		}
	}

	[RuleVersion(0)]
	public GroupContext group() {
		GroupContext _localctx = new GroupContext(Context, State);
		EnterRule(_localctx, 16, RULE_group);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122; Match(L_PARANTH);
			State = 125;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				{
				State = 123; expression(0);
				}
				break;
			case 2:
				{
				State = 124;
				_la = TokenStream.LA(1);
				if ( _la <= 0 || (_la==R_PARANTH) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 127; Match(R_PARANTH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Asm_idContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(KCCParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(KCCParser.IDENTIFIER, i);
		}
		public ITerminalNode[] DOT() { return GetTokens(KCCParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(KCCParser.DOT, i);
		}
		public Asm_idContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asm_id; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKCCListener typedListener = listener as IKCCListener;
			if (typedListener != null) typedListener.EnterAsm_id(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKCCListener typedListener = listener as IKCCListener;
			if (typedListener != null) typedListener.ExitAsm_id(this);
		}
	}

	[RuleVersion(0)]
	public Asm_idContext asm_id() {
		Asm_idContext _localctx = new Asm_idContext(Context, State);
		EnterRule(_localctx, 18, RULE_asm_id);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 133;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 129; Match(IDENTIFIER);
					State = 130; Match(DOT);
					}
					} 
				}
				State = 135;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			State = 136; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdContext : ParserRuleContext {
		public ITerminalNode DECIMAL() { return GetToken(KCCParser.DECIMAL, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(KCCParser.IDENTIFIER, 0); }
		public Logic_idContext logic_id() {
			return GetRuleContext<Logic_idContext>(0);
		}
		public IdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKCCListener typedListener = listener as IKCCListener;
			if (typedListener != null) typedListener.EnterId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKCCListener typedListener = listener as IKCCListener;
			if (typedListener != null) typedListener.ExitId(this);
		}
	}

	[RuleVersion(0)]
	public IdContext id() {
		IdContext _localctx = new IdContext(Context, State);
		EnterRule(_localctx, 20, RULE_id);
		try {
			State = 141;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DECIMAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 138; Match(DECIMAL);
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 139; Match(IDENTIFIER);
				}
				break;
			case TRUE:
			case FALSE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 140; logic_id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Symbol_idContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(KCCParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(KCCParser.IDENTIFIER, i);
		}
		public ITerminalNode[] DOT() { return GetTokens(KCCParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(KCCParser.DOT, i);
		}
		public Symbol_idContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbol_id; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKCCListener typedListener = listener as IKCCListener;
			if (typedListener != null) typedListener.EnterSymbol_id(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKCCListener typedListener = listener as IKCCListener;
			if (typedListener != null) typedListener.ExitSymbol_id(this);
		}
	}

	[RuleVersion(0)]
	public Symbol_idContext symbol_id() {
		Symbol_idContext _localctx = new Symbol_idContext(Context, State);
		EnterRule(_localctx, 22, RULE_symbol_id);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 143; Match(IDENTIFIER);
			State = 148;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 144; Match(DOT);
					State = 145; Match(IDENTIFIER);
					}
					} 
				}
				State = 150;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Logic_idContext : ParserRuleContext {
		public ITerminalNode TRUE() { return GetToken(KCCParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(KCCParser.FALSE, 0); }
		public Logic_idContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logic_id; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKCCListener typedListener = listener as IKCCListener;
			if (typedListener != null) typedListener.EnterLogic_id(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKCCListener typedListener = listener as IKCCListener;
			if (typedListener != null) typedListener.ExitLogic_id(this);
		}
	}

	[RuleVersion(0)]
	public Logic_idContext logic_id() {
		Logic_idContext _localctx = new Logic_idContext(Context, State);
		EnterRule(_localctx, 24, RULE_logic_id);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 151;
			_la = TokenStream.LA(1);
			if ( !(_la==TRUE || _la==FALSE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Control_blockContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(KCCParser.IF, 0); }
		public ITerminalNode ELSE() { return GetToken(KCCParser.ELSE, 0); }
		public ITerminalNode WHILE() { return GetToken(KCCParser.WHILE, 0); }
		public ITerminalNode FOREACH() { return GetToken(KCCParser.FOREACH, 0); }
		public Control_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_control_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKCCListener typedListener = listener as IKCCListener;
			if (typedListener != null) typedListener.EnterControl_block(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKCCListener typedListener = listener as IKCCListener;
			if (typedListener != null) typedListener.ExitControl_block(this);
		}
	}

	[RuleVersion(0)]
	public Control_blockContext control_block() {
		Control_blockContext _localctx = new Control_blockContext(Context, State);
		EnterRule(_localctx, 26, RULE_control_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 153;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IF) | (1L << ELSE) | (1L << WHILE) | (1L << FOREACH))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Control_idContext : ParserRuleContext {
		public ITerminalNode CONTINUE() { return GetToken(KCCParser.CONTINUE, 0); }
		public ITerminalNode BREAK() { return GetToken(KCCParser.BREAK, 0); }
		public ITerminalNode RETURN() { return GetToken(KCCParser.RETURN, 0); }
		public ITerminalNode GOTO() { return GetToken(KCCParser.GOTO, 0); }
		public Control_idContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_control_id; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKCCListener typedListener = listener as IKCCListener;
			if (typedListener != null) typedListener.EnterControl_id(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKCCListener typedListener = listener as IKCCListener;
			if (typedListener != null) typedListener.ExitControl_id(this);
		}
	}

	[RuleVersion(0)]
	public Control_idContext control_id() {
		Control_idContext _localctx = new Control_idContext(Context, State);
		EnterRule(_localctx, 28, RULE_control_id);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CONTINUE) | (1L << BREAK) | (1L << RETURN) | (1L << GOTO))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_opsContext : ParserRuleContext {
		public ITerminalNode INCREMENT() { return GetToken(KCCParser.INCREMENT, 0); }
		public ITerminalNode DECRIMENT() { return GetToken(KCCParser.DECRIMENT, 0); }
		public ITerminalNode LOGIC_NOT() { return GetToken(KCCParser.LOGIC_NOT, 0); }
		public Unary_opsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_ops; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKCCListener typedListener = listener as IKCCListener;
			if (typedListener != null) typedListener.EnterUnary_ops(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKCCListener typedListener = listener as IKCCListener;
			if (typedListener != null) typedListener.ExitUnary_ops(this);
		}
	}

	[RuleVersion(0)]
	public Unary_opsContext unary_ops() {
		Unary_opsContext _localctx = new Unary_opsContext(Context, State);
		EnterRule(_localctx, 30, RULE_unary_ops);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INCREMENT) | (1L << DECRIMENT) | (1L << LOGIC_NOT))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Binary_arith_opsContext : ParserRuleContext {
		public ITerminalNode SET() { return GetToken(KCCParser.SET, 0); }
		public ITerminalNode ADD() { return GetToken(KCCParser.ADD, 0); }
		public ITerminalNode SUBTRACT() { return GetToken(KCCParser.SUBTRACT, 0); }
		public ITerminalNode MULTIPLY() { return GetToken(KCCParser.MULTIPLY, 0); }
		public ITerminalNode DIVIDE() { return GetToken(KCCParser.DIVIDE, 0); }
		public ITerminalNode EXPONENT() { return GetToken(KCCParser.EXPONENT, 0); }
		public ITerminalNode MODULO() { return GetToken(KCCParser.MODULO, 0); }
		public ITerminalNode SET_SUM() { return GetToken(KCCParser.SET_SUM, 0); }
		public ITerminalNode SET_DIFFERENCE() { return GetToken(KCCParser.SET_DIFFERENCE, 0); }
		public ITerminalNode SET_PRODUCT() { return GetToken(KCCParser.SET_PRODUCT, 0); }
		public ITerminalNode SET_QUOTIENT() { return GetToken(KCCParser.SET_QUOTIENT, 0); }
		public Binary_arith_opsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binary_arith_ops; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKCCListener typedListener = listener as IKCCListener;
			if (typedListener != null) typedListener.EnterBinary_arith_ops(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKCCListener typedListener = listener as IKCCListener;
			if (typedListener != null) typedListener.ExitBinary_arith_ops(this);
		}
	}

	[RuleVersion(0)]
	public Binary_arith_opsContext binary_arith_ops() {
		Binary_arith_opsContext _localctx = new Binary_arith_opsContext(Context, State);
		EnterRule(_localctx, 32, RULE_binary_arith_ops);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 159;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SET) | (1L << ADD) | (1L << SUBTRACT) | (1L << MULTIPLY) | (1L << DIVIDE) | (1L << EXPONENT) | (1L << MODULO) | (1L << SET_SUM) | (1L << SET_DIFFERENCE) | (1L << SET_PRODUCT) | (1L << SET_QUOTIENT))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Binary_logic_opsContext : ParserRuleContext {
		public ITerminalNode LOGIC_OR() { return GetToken(KCCParser.LOGIC_OR, 0); }
		public ITerminalNode LOGIC_AND() { return GetToken(KCCParser.LOGIC_AND, 0); }
		public ITerminalNode LOGIC_NOT() { return GetToken(KCCParser.LOGIC_NOT, 0); }
		public ITerminalNode LOGIC_NAND() { return GetToken(KCCParser.LOGIC_NAND, 0); }
		public ITerminalNode LOGIC_NOR() { return GetToken(KCCParser.LOGIC_NOR, 0); }
		public ITerminalNode LOGIC_XOR() { return GetToken(KCCParser.LOGIC_XOR, 0); }
		public ITerminalNode LOGIC_XNOR() { return GetToken(KCCParser.LOGIC_XNOR, 0); }
		public ITerminalNode GTR() { return GetToken(KCCParser.GTR, 0); }
		public ITerminalNode LSS() { return GetToken(KCCParser.LSS, 0); }
		public ITerminalNode EQU() { return GetToken(KCCParser.EQU, 0); }
		public ITerminalNode GTR_EQU() { return GetToken(KCCParser.GTR_EQU, 0); }
		public ITerminalNode LSS_EQU() { return GetToken(KCCParser.LSS_EQU, 0); }
		public Binary_logic_opsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binary_logic_ops; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKCCListener typedListener = listener as IKCCListener;
			if (typedListener != null) typedListener.EnterBinary_logic_ops(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKCCListener typedListener = listener as IKCCListener;
			if (typedListener != null) typedListener.ExitBinary_logic_ops(this);
		}
	}

	[RuleVersion(0)]
	public Binary_logic_opsContext binary_logic_ops() {
		Binary_logic_opsContext _localctx = new Binary_logic_opsContext(Context, State);
		EnterRule(_localctx, 34, RULE_binary_logic_ops);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 161;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LOGIC_OR) | (1L << LOGIC_AND) | (1L << LOGIC_NOT) | (1L << LOGIC_NAND) | (1L << LOGIC_NOR) | (1L << LOGIC_XOR) | (1L << LOGIC_XNOR) | (1L << GTR) | (1L << LSS) | (1L << EQU) | (1L << GTR_EQU) | (1L << LSS_EQU))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryContext : ParserRuleContext {
		public Binary_arith_opsContext binary_arith_ops() {
			return GetRuleContext<Binary_arith_opsContext>(0);
		}
		public Binary_logic_opsContext binary_logic_ops() {
			return GetRuleContext<Binary_logic_opsContext>(0);
		}
		public BinaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKCCListener typedListener = listener as IKCCListener;
			if (typedListener != null) typedListener.EnterBinary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKCCListener typedListener = listener as IKCCListener;
			if (typedListener != null) typedListener.ExitBinary(this);
		}
	}

	[RuleVersion(0)]
	public BinaryContext binary() {
		BinaryContext _localctx = new BinaryContext(Context, State);
		EnterRule(_localctx, 36, RULE_binary);
		try {
			State = 165;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SET:
			case ADD:
			case SUBTRACT:
			case MULTIPLY:
			case DIVIDE:
			case EXPONENT:
			case MODULO:
			case SET_SUM:
			case SET_DIFFERENCE:
			case SET_PRODUCT:
			case SET_QUOTIENT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 163; binary_arith_ops();
				}
				break;
			case LOGIC_OR:
			case LOGIC_AND:
			case LOGIC_NOT:
			case LOGIC_NAND:
			case LOGIC_NOR:
			case LOGIC_XOR:
			case LOGIC_XNOR:
			case GTR:
			case LSS:
			case EQU:
			case GTR_EQU:
			case LSS_EQU:
				EnterOuterAlt(_localctx, 2);
				{
				State = 164; binary_logic_ops();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolContext : ParserRuleContext {
		public ITerminalNode TRUE() { return GetToken(KCCParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(KCCParser.FALSE, 0); }
		public BoolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKCCListener typedListener = listener as IKCCListener;
			if (typedListener != null) typedListener.EnterBool(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKCCListener typedListener = listener as IKCCListener;
			if (typedListener != null) typedListener.ExitBool(this);
		}
	}

	[RuleVersion(0)]
	public BoolContext @bool() {
		BoolContext _localctx = new BoolContext(Context, State);
		EnterRule(_localctx, 38, RULE_bool);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 167;
			_la = TokenStream.LA(1);
			if ( !(_la==TRUE || _la==FALSE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Arith_exprContext : ParserRuleContext {
		public ITerminalNode L_PARANTH() { return GetToken(KCCParser.L_PARANTH, 0); }
		public Arith_exprContext[] arith_expr() {
			return GetRuleContexts<Arith_exprContext>();
		}
		public Arith_exprContext arith_expr(int i) {
			return GetRuleContext<Arith_exprContext>(i);
		}
		public ITerminalNode R_PARANTH() { return GetToken(KCCParser.R_PARANTH, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode SUBTRACT() { return GetToken(KCCParser.SUBTRACT, 0); }
		public ITerminalNode INCREMENT() { return GetToken(KCCParser.INCREMENT, 0); }
		public ITerminalNode DECRIMENT() { return GetToken(KCCParser.DECRIMENT, 0); }
		public Binary_arith_opsContext binary_arith_ops() {
			return GetRuleContext<Binary_arith_opsContext>(0);
		}
		public Arith_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arith_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKCCListener typedListener = listener as IKCCListener;
			if (typedListener != null) typedListener.EnterArith_expr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKCCListener typedListener = listener as IKCCListener;
			if (typedListener != null) typedListener.ExitArith_expr(this);
		}
	}

	[RuleVersion(0)]
	public Arith_exprContext arith_expr() {
		return arith_expr(0);
	}

	private Arith_exprContext arith_expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Arith_exprContext _localctx = new Arith_exprContext(Context, _parentState);
		Arith_exprContext _prevctx = _localctx;
		int _startState = 40;
		EnterRecursionRule(_localctx, 40, RULE_arith_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 179;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case L_PARANTH:
				{
				State = 170; Match(L_PARANTH);
				State = 171; arith_expr(0);
				State = 172; Match(R_PARANTH);
				}
				break;
			case TRUE:
			case FALSE:
			case DECIMAL:
			case IDENTIFIER:
				{
				State = 174; id();
				}
				break;
			case SUBTRACT:
				{
				State = 175; Match(SUBTRACT);
				State = 176; id();
				}
				break;
			case INCREMENT:
			case DECRIMENT:
				{
				State = 177;
				_la = TokenStream.LA(1);
				if ( !(_la==INCREMENT || _la==DECRIMENT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 178; id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 187;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Arith_exprContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_arith_expr);
					State = 181;
					if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
					State = 182; binary_arith_ops();
					State = 183; arith_expr(6);
					}
					} 
				}
				State = 189;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TypeSpecifierContext : ParserRuleContext {
		public ITerminalNode CLASS() { return GetToken(KCCParser.CLASS, 0); }
		public TypeSpecifierContext typeSpecifier() {
			return GetRuleContext<TypeSpecifierContext>(0);
		}
		public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		public TypeSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeSpecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKCCListener typedListener = listener as IKCCListener;
			if (typedListener != null) typedListener.EnterTypeSpecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKCCListener typedListener = listener as IKCCListener;
			if (typedListener != null) typedListener.ExitTypeSpecifier(this);
		}
	}

	[RuleVersion(0)]
	public TypeSpecifierContext typeSpecifier() {
		return typeSpecifier(0);
	}

	private TypeSpecifierContext typeSpecifier(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TypeSpecifierContext _localctx = new TypeSpecifierContext(Context, _parentState);
		TypeSpecifierContext _prevctx = _localctx;
		int _startState = 42;
		EnterRecursionRule(_localctx, 42, RULE_typeSpecifier, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 191;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << CLASS))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
			Context.Stop = TokenStream.LT(-1);
			State = 197;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TypeSpecifierContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_typeSpecifier);
					State = 193;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 194; array();
					}
					} 
				}
				State = 199;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		public ITerminalNode L_BRACKET() { return GetToken(KCCParser.L_BRACKET, 0); }
		public ITerminalNode R_BRACKET() { return GetToken(KCCParser.R_BRACKET, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKCCListener typedListener = listener as IKCCListener;
			if (typedListener != null) typedListener.EnterArray(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKCCListener typedListener = listener as IKCCListener;
			if (typedListener != null) typedListener.ExitArray(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(Context, State);
		EnterRule(_localctx, 44, RULE_array);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 200; Match(L_BRACKET);
			State = 202;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TRUE) | (1L << FALSE) | (1L << DECIMAL) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 201; id();
				}
			}

			State = 204; Match(R_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 5: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 20: return arith_expr_sempred((Arith_exprContext)_localctx, predIndex);
		case 21: return typeSpecifier_sempred((TypeSpecifierContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 3);
		}
		return true;
	}
	private bool arith_expr_sempred(Arith_exprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 5);
		}
		return true;
	}
	private bool typeSpecifier_sempred(TypeSpecifierContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '@', '\xD1', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x3', '\x2', '\a', '\x2', '\x32', '\n', '\x2', '\f', '\x2', '\xE', 
		'\x2', '\x35', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', '\x42', '\n', '\x4', 
		'\f', '\x4', '\xE', '\x4', '\x45', '\v', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 
		'M', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', 'Q', '\n', 
		'\x6', '\f', '\x6', '\xE', '\x6', 'T', '\v', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x5', '\x6', ']', '\n', '\x6', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x5', '\a', 'i', '\n', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\a', '\a', 'o', '\n', '\a', '\f', '\a', 
		'\xE', '\a', 'r', '\v', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', '\x80', '\n', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\a', '\v', '\x86', 
		'\n', '\v', '\f', '\v', '\xE', '\v', '\x89', '\v', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\x90', 
		'\n', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\a', '\r', '\x95', 
		'\n', '\r', '\f', '\r', '\xE', '\r', '\x98', '\v', '\r', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\xA8', '\n', 
		'\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x5', '\x16', '\xB6', '\n', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\a', '\x16', 
		'\xBC', '\n', '\x16', '\f', '\x16', '\xE', '\x16', '\xBF', '\v', '\x16', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\a', '\x17', '\xC6', '\n', '\x17', '\f', '\x17', '\xE', '\x17', '\xC9', 
		'\v', '\x17', '\x3', '\x18', '\x3', '\x18', '\x5', '\x18', '\xCD', '\n', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x4', '\x87', '\x96', 
		'\x5', '\f', '*', ',', '\x19', '\x2', '\x4', '\x6', '\b', '\n', '\f', 
		'\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', 
		' ', '\"', '$', '&', '(', '*', ',', '.', '\x2', '\f', '\x3', '\x2', ':', 
		':', '\x3', '\x2', '\x38', '\x38', '\x3', '\x2', '\x30', '\x31', '\x3', 
		'\x2', '\n', '\r', '\x3', '\x2', '\xE', '\x11', '\x4', '\x2', '\x1D', 
		'\x1E', '!', '!', '\x3', '\x2', '\x12', '\x1C', '\x3', '\x2', '\x1F', 
		'*', '\x3', '\x2', '\x1D', '\x1E', '\x4', '\x2', '\x3', '\t', '.', '.', 
		'\x2', '\xD5', '\x2', '\x33', '\x3', '\x2', '\x2', '\x2', '\x4', '\x38', 
		'\x3', '\x2', '\x2', '\x2', '\x6', '<', '\x3', '\x2', '\x2', '\x2', '\b', 
		'L', '\x3', '\x2', '\x2', '\x2', '\n', '\\', '\x3', '\x2', '\x2', '\x2', 
		'\f', 'h', '\x3', '\x2', '\x2', '\x2', '\xE', 's', '\x3', '\x2', '\x2', 
		'\x2', '\x10', 'w', '\x3', '\x2', '\x2', '\x2', '\x12', '|', '\x3', '\x2', 
		'\x2', '\x2', '\x14', '\x87', '\x3', '\x2', '\x2', '\x2', '\x16', '\x8F', 
		'\x3', '\x2', '\x2', '\x2', '\x18', '\x91', '\x3', '\x2', '\x2', '\x2', 
		'\x1A', '\x99', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x9B', '\x3', '\x2', 
		'\x2', '\x2', '\x1E', '\x9D', '\x3', '\x2', '\x2', '\x2', ' ', '\x9F', 
		'\x3', '\x2', '\x2', '\x2', '\"', '\xA1', '\x3', '\x2', '\x2', '\x2', 
		'$', '\xA3', '\x3', '\x2', '\x2', '\x2', '&', '\xA7', '\x3', '\x2', '\x2', 
		'\x2', '(', '\xA9', '\x3', '\x2', '\x2', '\x2', '*', '\xB5', '\x3', '\x2', 
		'\x2', '\x2', ',', '\xC0', '\x3', '\x2', '\x2', '\x2', '.', '\xCA', '\x3', 
		'\x2', '\x2', '\x2', '\x30', '\x32', '\x5', '\x4', '\x3', '\x2', '\x31', 
		'\x30', '\x3', '\x2', '\x2', '\x2', '\x32', '\x35', '\x3', '\x2', '\x2', 
		'\x2', '\x33', '\x31', '\x3', '\x2', '\x2', '\x2', '\x33', '\x34', '\x3', 
		'\x2', '\x2', '\x2', '\x34', '\x36', '\x3', '\x2', '\x2', '\x2', '\x35', 
		'\x33', '\x3', '\x2', '\x2', '\x2', '\x36', '\x37', '\a', '\x2', '\x2', 
		'\x3', '\x37', '\x3', '\x3', '\x2', '\x2', '\x2', '\x38', '\x39', '\a', 
		'\x32', '\x2', '\x2', '\x39', ':', '\a', '>', '\x2', '\x2', ':', ';', 
		'\x5', '\x6', '\x4', '\x2', ';', '\x5', '\x3', '\x2', '\x2', '\x2', '<', 
		'\x43', '\a', '\x39', '\x2', '\x2', '=', '\x42', '\x5', '\x10', '\t', 
		'\x2', '>', '\x42', '\x5', '\n', '\x6', '\x2', '?', '\x42', '\x5', '\x6', 
		'\x4', '\x2', '@', '\x42', '\n', '\x2', '\x2', '\x2', '\x41', '=', '\x3', 
		'\x2', '\x2', '\x2', '\x41', '>', '\x3', '\x2', '\x2', '\x2', '\x41', 
		'?', '\x3', '\x2', '\x2', '\x2', '\x41', '@', '\x3', '\x2', '\x2', '\x2', 
		'\x42', '\x45', '\x3', '\x2', '\x2', '\x2', '\x43', '\x41', '\x3', '\x2', 
		'\x2', '\x2', '\x43', '\x44', '\x3', '\x2', '\x2', '\x2', '\x44', '\x46', 
		'\x3', '\x2', '\x2', '\x2', '\x45', '\x43', '\x3', '\x2', '\x2', '\x2', 
		'\x46', 'G', '\a', ':', '\x2', '\x2', 'G', '\a', '\x3', '\x2', '\x2', 
		'\x2', 'H', 'I', '\a', '.', '\x2', '\x2', 'I', 'J', '\a', '>', '\x2', 
		'\x2', 'J', 'M', '\x5', '\x6', '\x4', '\x2', 'K', 'M', '\x5', '\n', '\x6', 
		'\x2', 'L', 'H', '\x3', '\x2', '\x2', '\x2', 'L', 'K', '\x3', '\x2', '\x2', 
		'\x2', 'M', '\t', '\x3', '\x2', '\x2', '\x2', 'N', ']', '\x5', '\xE', 
		'\b', '\x2', 'O', 'Q', '\x5', '\f', '\a', '\x2', 'P', 'O', '\x3', '\x2', 
		'\x2', '\x2', 'Q', 'T', '\x3', '\x2', '\x2', '\x2', 'R', 'P', '\x3', '\x2', 
		'\x2', '\x2', 'R', 'S', '\x3', '\x2', '\x2', '\x2', 'S', 'U', '\x3', '\x2', 
		'\x2', '\x2', 'T', 'R', '\x3', '\x2', '\x2', '\x2', 'U', ']', '\a', '?', 
		'\x2', '\x2', 'V', 'W', '\a', '>', '\x2', '\x2', 'W', 'X', '\a', '>', 
		'\x2', '\x2', 'X', 'Y', '\x5', '\x12', '\n', '\x2', 'Y', 'Z', '\x5', '\x6', 
		'\x4', '\x2', 'Z', '[', '\a', '?', '\x2', '\x2', '[', ']', '\x3', '\x2', 
		'\x2', '\x2', '\\', 'N', '\x3', '\x2', '\x2', '\x2', '\\', 'R', '\x3', 
		'\x2', '\x2', '\x2', '\\', 'V', '\x3', '\x2', '\x2', '\x2', ']', '\v', 
		'\x3', '\x2', '\x2', '\x2', '^', '_', '\b', '\a', '\x1', '\x2', '_', '`', 
		'\a', '>', '\x2', '\x2', '`', 'i', '\x5', '\f', '\a', '\t', '\x61', 'i', 
		'\x5', '\x18', '\r', '\x2', '\x62', 'i', '\x5', '\x12', '\n', '\x2', '\x63', 
		'\x64', '\x5', ' ', '\x11', '\x2', '\x64', '\x65', '\x5', '\f', '\a', 
		'\x6', '\x65', 'i', '\x3', '\x2', '\x2', '\x2', '\x66', 'i', '\x5', '(', 
		'\x15', '\x2', 'g', 'i', '\x5', '\x16', '\f', '\x2', 'h', '^', '\x3', 
		'\x2', '\x2', '\x2', 'h', '\x61', '\x3', '\x2', '\x2', '\x2', 'h', '\x62', 
		'\x3', '\x2', '\x2', '\x2', 'h', '\x63', '\x3', '\x2', '\x2', '\x2', 'h', 
		'\x66', '\x3', '\x2', '\x2', '\x2', 'h', 'g', '\x3', '\x2', '\x2', '\x2', 
		'i', 'p', '\x3', '\x2', '\x2', '\x2', 'j', 'k', '\f', '\x5', '\x2', '\x2', 
		'k', 'l', '\x5', '&', '\x14', '\x2', 'l', 'm', '\x5', '\f', '\a', '\x6', 
		'm', 'o', '\x3', '\x2', '\x2', '\x2', 'n', 'j', '\x3', '\x2', '\x2', '\x2', 
		'o', 'r', '\x3', '\x2', '\x2', '\x2', 'p', 'n', '\x3', '\x2', '\x2', '\x2', 
		'p', 'q', '\x3', '\x2', '\x2', '\x2', 'q', '\r', '\x3', '\x2', '\x2', 
		'\x2', 'r', 'p', '\x3', '\x2', '\x2', '\x2', 's', 't', '\x5', '\f', '\a', 
		'\x2', 't', 'u', '\x5', '\x12', '\n', '\x2', 'u', 'v', '\a', '?', '\x2', 
		'\x2', 'v', '\xF', '\x3', '\x2', '\x2', '\x2', 'w', 'x', '\a', '>', '\x2', 
		'\x2', 'x', 'y', '\a', '>', '\x2', '\x2', 'y', 'z', '\x5', '\x12', '\n', 
		'\x2', 'z', '{', '\x5', '\x6', '\x4', '\x2', '{', '\x11', '\x3', '\x2', 
		'\x2', '\x2', '|', '\x7F', '\a', '\x37', '\x2', '\x2', '}', '\x80', '\x5', 
		'\f', '\a', '\x2', '~', '\x80', '\n', '\x3', '\x2', '\x2', '\x7F', '}', 
		'\x3', '\x2', '\x2', '\x2', '\x7F', '~', '\x3', '\x2', '\x2', '\x2', '\x7F', 
		'\x80', '\x3', '\x2', '\x2', '\x2', '\x80', '\x81', '\x3', '\x2', '\x2', 
		'\x2', '\x81', '\x82', '\a', '\x38', '\x2', '\x2', '\x82', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '\x83', '\x84', '\a', '>', '\x2', '\x2', '\x84', 
		'\x86', '\a', '\x34', '\x2', '\x2', '\x85', '\x83', '\x3', '\x2', '\x2', 
		'\x2', '\x86', '\x89', '\x3', '\x2', '\x2', '\x2', '\x87', '\x88', '\x3', 
		'\x2', '\x2', '\x2', '\x87', '\x85', '\x3', '\x2', '\x2', '\x2', '\x88', 
		'\x8A', '\x3', '\x2', '\x2', '\x2', '\x89', '\x87', '\x3', '\x2', '\x2', 
		'\x2', '\x8A', '\x8B', '\a', '>', '\x2', '\x2', '\x8B', '\x15', '\x3', 
		'\x2', '\x2', '\x2', '\x8C', '\x90', '\a', '=', '\x2', '\x2', '\x8D', 
		'\x90', '\a', '>', '\x2', '\x2', '\x8E', '\x90', '\x5', '\x1A', '\xE', 
		'\x2', '\x8F', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x8D', '\x3', 
		'\x2', '\x2', '\x2', '\x8F', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x90', 
		'\x17', '\x3', '\x2', '\x2', '\x2', '\x91', '\x96', '\a', '>', '\x2', 
		'\x2', '\x92', '\x93', '\a', '\x34', '\x2', '\x2', '\x93', '\x95', '\a', 
		'>', '\x2', '\x2', '\x94', '\x92', '\x3', '\x2', '\x2', '\x2', '\x95', 
		'\x98', '\x3', '\x2', '\x2', '\x2', '\x96', '\x97', '\x3', '\x2', '\x2', 
		'\x2', '\x96', '\x94', '\x3', '\x2', '\x2', '\x2', '\x97', '\x19', '\x3', 
		'\x2', '\x2', '\x2', '\x98', '\x96', '\x3', '\x2', '\x2', '\x2', '\x99', 
		'\x9A', '\t', '\x4', '\x2', '\x2', '\x9A', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '\x9B', '\x9C', '\t', '\x5', '\x2', '\x2', '\x9C', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '\x9D', '\x9E', '\t', '\x6', '\x2', '\x2', '\x9E', 
		'\x1F', '\x3', '\x2', '\x2', '\x2', '\x9F', '\xA0', '\t', '\a', '\x2', 
		'\x2', '\xA0', '!', '\x3', '\x2', '\x2', '\x2', '\xA1', '\xA2', '\t', 
		'\b', '\x2', '\x2', '\xA2', '#', '\x3', '\x2', '\x2', '\x2', '\xA3', '\xA4', 
		'\t', '\t', '\x2', '\x2', '\xA4', '%', '\x3', '\x2', '\x2', '\x2', '\xA5', 
		'\xA8', '\x5', '\"', '\x12', '\x2', '\xA6', '\xA8', '\x5', '$', '\x13', 
		'\x2', '\xA7', '\xA5', '\x3', '\x2', '\x2', '\x2', '\xA7', '\xA6', '\x3', 
		'\x2', '\x2', '\x2', '\xA8', '\'', '\x3', '\x2', '\x2', '\x2', '\xA9', 
		'\xAA', '\t', '\x4', '\x2', '\x2', '\xAA', ')', '\x3', '\x2', '\x2', '\x2', 
		'\xAB', '\xAC', '\b', '\x16', '\x1', '\x2', '\xAC', '\xAD', '\a', '\x37', 
		'\x2', '\x2', '\xAD', '\xAE', '\x5', '*', '\x16', '\x2', '\xAE', '\xAF', 
		'\a', '\x38', '\x2', '\x2', '\xAF', '\xB6', '\x3', '\x2', '\x2', '\x2', 
		'\xB0', '\xB6', '\x5', '\x16', '\f', '\x2', '\xB1', '\xB2', '\a', '\x14', 
		'\x2', '\x2', '\xB2', '\xB6', '\x5', '\x16', '\f', '\x2', '\xB3', '\xB4', 
		'\t', '\n', '\x2', '\x2', '\xB4', '\xB6', '\x5', '\x16', '\f', '\x2', 
		'\xB5', '\xAB', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xB0', '\x3', '\x2', 
		'\x2', '\x2', '\xB5', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xB3', 
		'\x3', '\x2', '\x2', '\x2', '\xB6', '\xBD', '\x3', '\x2', '\x2', '\x2', 
		'\xB7', '\xB8', '\f', '\a', '\x2', '\x2', '\xB8', '\xB9', '\x5', '\"', 
		'\x12', '\x2', '\xB9', '\xBA', '\x5', '*', '\x16', '\b', '\xBA', '\xBC', 
		'\x3', '\x2', '\x2', '\x2', '\xBB', '\xB7', '\x3', '\x2', '\x2', '\x2', 
		'\xBC', '\xBF', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xBB', '\x3', '\x2', 
		'\x2', '\x2', '\xBD', '\xBE', '\x3', '\x2', '\x2', '\x2', '\xBE', '+', 
		'\x3', '\x2', '\x2', '\x2', '\xBF', '\xBD', '\x3', '\x2', '\x2', '\x2', 
		'\xC0', '\xC1', '\b', '\x17', '\x1', '\x2', '\xC1', '\xC2', '\t', '\v', 
		'\x2', '\x2', '\xC2', '\xC7', '\x3', '\x2', '\x2', '\x2', '\xC3', '\xC4', 
		'\f', '\x3', '\x2', '\x2', '\xC4', '\xC6', '\x5', '.', '\x18', '\x2', 
		'\xC5', '\xC3', '\x3', '\x2', '\x2', '\x2', '\xC6', '\xC9', '\x3', '\x2', 
		'\x2', '\x2', '\xC7', '\xC5', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xC8', 
		'\x3', '\x2', '\x2', '\x2', '\xC8', '-', '\x3', '\x2', '\x2', '\x2', '\xC9', 
		'\xC7', '\x3', '\x2', '\x2', '\x2', '\xCA', '\xCC', '\a', '\x35', '\x2', 
		'\x2', '\xCB', '\xCD', '\x5', '\x16', '\f', '\x2', '\xCC', '\xCB', '\x3', 
		'\x2', '\x2', '\x2', '\xCC', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xCD', 
		'\xCE', '\x3', '\x2', '\x2', '\x2', '\xCE', '\xCF', '\a', '\x36', '\x2', 
		'\x2', '\xCF', '/', '\x3', '\x2', '\x2', '\x2', '\x13', '\x33', '\x41', 
		'\x43', 'L', 'R', '\\', 'h', 'p', '\x7F', '\x87', '\x8F', '\x96', '\xA7', 
		'\xB5', '\xBD', '\xC7', '\xCC',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
